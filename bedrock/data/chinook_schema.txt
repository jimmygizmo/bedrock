

Chinook ERP Database Schema
===========================

* Please refer to the schema diagram in the project at:
/extras/erp-schema-chinook.png

* Each model and each schema file has a copy of the SQL CREATE for the associated table for a nearby reference.


** All of the SQL (PostreSQL dialect from the Chinook project) is included in this project in the file:
Chinook_PostgreSql_AutoIncrementPKs.sql
('auto-increments simply indicates this is a modern schema definition, using recent Postgres primary key mechanisms)'

# OFFICIAL - SQL
https://github.com/lerocha/chinook-database

# CSV VERSION DATA FILES
# https://www.kaggle.com/datasets/anurag629/chinook-csv-dataset


------------------------------------------------------------------------------------------------------------------------

TIMEZONE AWARENESS
==================

The Chinook DB schema and data is all timezone zaive and does not contain any timezone information and the DB columns
do not require or allow timezones. This is the only think about Chinook I change a little to be more modern and best
practice but I don't actually change the original CSV data I use. I just add a UTC timezone to that data during
seeding. The other main point is that in the SQLAlchemy models, I do specify timezone awareness for all DateTime
columns and all TIMESTAMP columns or any related objects. The entire Bedrock stack is TIMEZONE AWARE as all modern
apps must be. Within Bedrock, all date/time operations expect, assume or require timezone data and formats. During
seeding, a UTC timezone is 'forced' or added to the Chinook data, in only 3 needed columns in 2 different tables and
we do it with this call:

datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)

See code and comments in main.py and seed.py if you need further detail.


------------------------------------------------------------------------------------------------------------------------

I find all four of the below to be nice perspectives on the shcema with different strengths in the formats.
TODO: Make an even better expression of the schema, taking the best elemets from these.


RELATIONSHIPS:
==============

Artist (1) ‚Üí (many) Album

Album (1) ‚Üí (many) Track

Track (many) ‚Üí (1) Genre

Track (many) ‚Üí (1) MediaType

Track (many) ‚Üí (many) Playlist (via PlaylistTrack)

Customer (many) ‚Üí (1) Employee (SupportRepId)

Invoice (1) ‚Üí (many) InvoiceLine

Customer (1) ‚Üí (many) Invoice

------------------------------------------------------------------------------------------------------------------------


üìê Tables & PKs
===============

artists (ArtistId PK)

albums (AlbumId PK, ArtistId FK ‚Üí artists.ArtistId)

media_types (MediaTypeId PK)

genres (GenreId PK)

tracks (TrackId PK, FKs ‚Üí albums, media_types, genres)

customers (CustomerId PK, SupportRepId FK ‚Üí employees.EmployeeId)

employees (EmployeeId PK, ReportsTo FK ‚Üí employees.EmployeeId)

invoices (InvoiceId PK, CustomerId FK ‚Üí customers.CustomerId)

invoice_lines (InvoiceLineId PK, InvoiceId, TrackId FKs)

playlists (PlaylistId PK)

playlist_track (composite PK on PlaylistId + TrackId, FKs to playlists & tracks)

------------------------------------------------------------------------------------------------------------------------


Relationships Overview
======================

artists (1) ‚îÄ‚îÄ‚îÄ‚îÄ< albums (n)

albums (1) ‚îÄ‚îÄ‚îÄ‚îÄ< tracks (n)

media_types (1) ‚îÄ‚îÄ‚îÄ‚îÄ< tracks (n)

genres (1) ‚îÄ‚îÄ‚îÄ‚îÄ< tracks (n)

tracks (n) ‚îÄ‚îÄ‚îÄ‚îÄ<‚îÄ playlist_track ‚îÄ> (n) playlists (many-to-many)

employees (1) ‚îÄ‚îÄ‚îÄ‚îÄ< customers (n) (via SupportRepId)

employees (1) ‚îÄ‚îÄ‚îÄ‚îÄ< direct reports (n) (via ReportsTo)

customers (1) ‚îÄ‚îÄ‚îÄ‚îÄ< invoices (n)

invoices (1) ‚îÄ‚îÄ‚îÄ‚îÄ< invoice_lines (n)

tracks (1) ‚îÄ‚îÄ‚îÄ‚îÄ< invoice_lines (n)

------------------------------------------------------------------------------------------------------------------------


Schema Snapshot
===============


artists
-------
PK: ArtistId


albums
------
PK: AlbumId
FK: ArtistId ‚Üí artists


tracks
------
PK: TrackId
FKs:
    AlbumId ‚Üí albums
    MediaTypeId ‚Üí media_types
    GenreId ‚Üí genres


customers
---------
PK: CustomerId
FK: SupportRepId ‚Üí employees


employees
---------
PK: EmployeeId
FK: ReportsTo ‚Üí employees


invoices
--------
PK: InvoiceId
FK: CustomerId ‚Üí customers


invoice_lines
-------------
PK: InvoiceLineId
FKs:
    InvoiceId ‚Üí invoices
    TrackId ‚Üí tracks


playlists
---------
PK: PlaylistId


playlist_track
--------------
Composite PK: (PlaylistId, TrackId)
FKs:
    PlaylistId ‚Üí playlists
    TrackId ‚Üí tracks

------------------------------------------------------------------------------------------------------------------------

